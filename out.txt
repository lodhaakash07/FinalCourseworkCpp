#ifndef CSVHANDLER_H
#define CSVHANDLER_H

#include "Matrix.h"
#include "FileHandler.h"
#include <vector>
#include <string>

class CSVHandler : public FileHandler {
public:
    Matrix readCSV(const std::string& filename);
};

#endif // CSVHANDLER_H
#ifndef FILEHANDLER_H
#define FILEHANDLER_H

#include <vector>
#include <string>

class FileHandler {
public:
    std::vector<std::string> readFile(const std::string& filename);
};

#endif // FILEHANDLER_H
#include "Headers/CSVHandler.h"
#include <sstream>


Matrix CSVHandler::readCSV(const std::string& filename) {
    std::vector<std::string> lines = readFile(filename);
    Matrix data;

    for (const std::string& line : lines) {
        std::vector<double> row;
        std::stringstream ss(line);
        std::string cell;

        while (std::getline(ss, cell, ',')) {
            row.push_back(std::stod(cell));
        }

        data.appendRow(row);
    }
    return data;
}
#include "Headers/FileHandler.h""
#include <fstream>
#include <iostream>

std::vector<std::string> FileHandler::readFile(const std::string& filename) {
    std::vector<std::string> lines;
    std::ifstream file(filename);

    if (!file.is_open()) {
        std::cout << "Failed to open the file: " << filename << std::endl;
        return lines;
    }

    std::string line;
    while (std::getline(file, line)) {
        lines.push_back(line);
    }

    file.close();
    return lines;
}
#include <iostream>
#include <vector>
#include "Headers/Matrix.h"
#include "Headers/CSVHandler.h"

#include "Headers/Window.h"
#include <iostream>
#include <vector>
#include "Headers/Portfolio.h"
int main() {

    // Read the file
    CSVHandler csvHandler;
    Matrix assetReturns = csvHandler.readCSV("Data/asset_returns.csv");

    // Check if matrix is empty
    if (assetReturns.getData().empty()) {
        std::cout << "Matrix is empty" << std::endl;
        return 0;
    }

    // Create an object of Window
    Window window(100, 10);

    // Create an array of Portfolios
    std::vector<Portfolio> portfolios;

    // Loop over assetReturns to create rolling window portfolios
    int numAssets = assetReturns.getData()[1].size();
    std::cout << "Number of assets: " << numAssets << std::endl;

    int count = 0;
    for (int currentIndex = 0; currentIndex + window.getInSampleSize() < assetReturns.getData().size(); currentIndex += window.getOutSampleSize()) {
        
        std::cout << "Processing in sample rolling window : " << count++ << std::endl;
        Portfolio portfolio(assetReturns);
        portfolio.addAssetReturnsIndex(currentIndex, currentIndex + window.getInSampleSize());

        // Calculate mean returns and covariance matrix
        portfolio.calculateMeanReturns();
        portfolio.calculateCovarianceMatrix();

        portfolios.push_back(portfolio);
       
    }

    std::cout << "Success" << std::endl;

    return 0;
}
#ifndef MATRIX_H
#define MATRIX_H

#include <vector>

class Matrix {
private:
    std::vector<std::vector<double> > data;

public:
    Matrix();
    Matrix(const std::vector<std::vector<double> >& inputData);
    Matrix(int numRows, int numCols)
    : data(numRows, std::vector<double>(numCols)) {}

    void setData(const std::vector<std::vector<double> >& inputData);
    void setData(int row, int col, double value);
    void appendRow(const std::vector<double>& row);
    const Matrix& getData() const;

    Matrix operator*(const Matrix& other) const;
    Matrix crossProduct(const Matrix& other) const;
    double dotProduct(const Matrix& other) const;
    const std::vector<double> getColumn(int columnIndex);
    Matrix subset(int startIndex, int endIndex) const;
    Matrix transpose();
    Matrix operator*(const Matrix& other);
    Matrix operator/(double scalar);
    void transposeInPlace();
    const int Matrix::size() const ;
};



#endif // MATRIX_H
#include "Headers/Matrix.h""
#include <stdexcept>

Matrix::Matrix() {}

Matrix::Matrix(const std::vector<std::vector<double> >& inputData) : data(inputData) {}



void Matrix::setData(const std::vector<std::vector<double> >& inputData) {
    data = inputData;
}


void Matrix::appendRow(const std::vector<double>& row) {
    if (!data.empty() && row.size() != data[0].size()) {
        throw std::runtime_error("Cannot append row: Incompatible size");
    }
    data.push_back(row);
}


const Matrix& Matrix::getData() const {
    return data;
}



Matrix Matrix::operator*(const Matrix& other) {
    // Check if the matrices are compatible for multiplication
    if (data[0].size() != other.data.size()) {
        throw std::runtime_error("Matrix multiplication error: Incompatible matrix dimensions");
    }

    int numRows = data.size();
    int numCols = other.data[0].size();
    int commonDim = data[0].size();

    Matrix result(numRows, numCols);

    for (int i = 0; i < numRows; ++i) {
        for (int j = 0; j < numCols; ++j) {
            double sum = 0.0;
            for (int k = 0; k < commonDim; ++k) {
                sum += data[i][k] * other.data[k][j];
            }
            result.setData(i, j, sum);
        }
    }

    return result;
}

Matrix Matrix::operator/(double scalar)  {
    Matrix result(data.size(), data[0].size());

    for (size_t i = 0; i < data.size(); ++i) {
        for (size_t j = 0; j < data[i].size(); ++j) {
            result.setData(i, j, data[i][j] / scalar);
        }
    }

    return result;
}


Matrix Matrix::transpose() {
    int numRows = data.size();
    int numCols = data[0].size();

    Matrix result(numCols, numRows);

    for (int i = 0; i < numRows; ++i) {
        for (int j = 0; j < numCols; ++j) {
            result.setData(j, i, data[i][j]);
        }
    }

    return result;
}


Matrix Matrix::crossProduct(const Matrix& other) const {
    
}

double Matrix::dotProduct(const Matrix& other) const {
    if (data.empty() || other.data.empty() || data.size() != other.data.size() ||
        data[0].size() != other.data[0].size()) {
        throw std::runtime_error("Invalid dot product operation: Matrices must have the same size");
    }

    double result = 0.0;
    int rows = data.size();
    int cols = data[0].size();

    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            result += data[i][j] * other.data[i][j];
        }
    }

    return result;
}

const std::vector<double> Matrix::getColumn(int columnIndex) {
    std::vector<double> column;

    if (!data.empty()) {
        for (const auto& row : data) {
            if (columnIndex < row.size()) {
                column.push_back(row[columnIndex]);
            }
        }
    }

    return column;
}

void Matrix::setData(int row, int col, double value) {
    if (row >= 0 && row < data.size() && col >= 0 && col < data[row].size()) {
        data[row][col] = value;
    } else {
        throw std::runtime_error("Invalid matrix index");
    }
}

Matrix Matrix::subset(int startIndex, int endIndex) const {
    if (startIndex < 0 || endIndex >= data.size() || startIndex > endIndex) {
        throw std::runtime_error("Invalid indices for subsetting");
    }

    std::vector<std::vector<double> > subsetData;
    for (int i = startIndex; i < endIndex; ++i) {
        subsetData.push_back(data[i]);
    }
    
    return Matrix(subsetData);
}

void Matrix::transposeInPlace() {
    int numRows = data.size();
    int numCols = data[0].size();

    std::vector<std::vector<double> > transposedData(numCols, std::vector<double>(numRows));

    for (int i = 0; i < numRows; ++i) {
        for (int j = 0; j < numCols; ++j) {
            transposedData[j][i] = data[i][j];
        }
    }

    data = transposedData;
}

const int Matrix::size() const {
    return data.size();
}#ifndef PORTFOLIO_H
#define PORTFOLIO_H

#include "Matrix.h"
#include <vector>

class Portfolio {
private:
    const Matrix& assetReturns;
    int assetReturnsIndexes[2];
    std::vector<double> meanReturns;
    Matrix covarianceMatrix;

public:
    Portfolio(const Matrix& assetReturns);

    void addAssetReturnsIndex(int start, int end);
    void calculateMeanReturns();
    void calculateCovarianceMatrix();

    std::vector<double> getMeanReturns();
    Matrix getCovarianceMatrix();
};

#endif // PORTFOLIO_H
#ifndef WINDOW_H
#define WINDOW_H

class Window {
private:
    int inSampleSize;
    int outSampleSize;

public:
    Window();
    Window(int inSample, int outSample);

    void setInSampleSize(int inSample);
    void setOutSampleSize(int outSample);

    int getInSampleSize() const;
    int getOutSampleSize() const;
};

#endif // WINDOW_H
#include "Headers/Portfolio.h"
#include "Headers/Matrix.h"
#include<iostream>

Portfolio::Portfolio(const Matrix& assetReturns)
    : assetReturns(assetReturns) {}

void Portfolio::addAssetReturnsIndex(int start, int end) {
    assetReturnsIndexes[0] = start;
    assetReturnsIndexes[1] = end;
}

void Portfolio::calculateMeanReturns() {
    Matrix portfolioAssets = assetReturns.subset(assetReturnsIndexes[0], assetReturnsIndexes[1]);
   
    portfolioAssets.transposeInPlace();
    int numAssets = portfolioAssets.size();
    std::cout << "Num Assets:" << numAssets << std::endl;
    int numDays = portfolioAssets.getData()[0].size();
     std::cout << "Num Days:" << numDays << std::endl;

    meanReturns.clear();

    for (int i = 0; i < numAssets; ++i) {
        double sum = 0.0;
        for (int k = 0; k < numDays; ++k) {
            sum += portfolioAssets.getData()[i][k];
        }
        double meanReturn = sum / numDays;
        meanReturns.push_back(meanReturn);
    }
}

void Portfolio::calculateCovarianceMatrix() {
    Matrix portfolioAssets = assetReturns.subset(assetReturnsIndexes[0], assetReturnsIndexes[1]);
    portfolioAssets.transposeInPlace();
    int numAssets = portfolioAssets.getData().size();
    int numDays = portfolioAssets.getData()[0].size();

    //calculateMeanReturns();

    covarianceMatrix = Matrix(numAssets, numAssets);

    for (int i = 0; i < numAssets; ++i) {
        for (int j = 0; j <= i; ++j) {
            double sum = 0.0;
            for (int k = 0; k < numDays; ++k) {
                double diff_i = portfolioAssets.getData()[i][k] - meanReturns[i];
                double diff_j = portfolioAssets.getData()[j][k] - meanReturns[j];
                sum += diff_i * diff_j;
            }
            double cov = sum / (numDays - 1);
            covarianceMatrix.setData(i, j, cov);
            covarianceMatrix.setData(j, i, cov); // Covariance matrix is symmetric
        }
    }
}

std::vector<double> Portfolio::getMeanReturns() {
    if (meanReturns.empty()) {
        calculateMeanReturns();
    }
    return meanReturns;
}

Matrix Portfolio::getCovarianceMatrix() {
    if (covarianceMatrix.getData().empty()) {
        calculateCovarianceMatrix();
    }
    return covarianceMatrix;
}
#include "Headers/Window.h"

Window::Window() : inSampleSize(0), outSampleSize(0) {}

Window::Window(int inSample, int outSample) : inSampleSize(inSample), outSampleSize(outSample) {}

void Window::setInSampleSize(int inSample) {
    inSampleSize = inSample;
}

void Window::setOutSampleSize(int outSample) {
    outSampleSize = outSample;
}

int Window::getInSampleSize() const {
    return inSampleSize;
}

int Window::getOutSampleSize() const {
    return outSampleSize;
}
