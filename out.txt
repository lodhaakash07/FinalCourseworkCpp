#ifndef CSVHANDLER_H
#define CSVHANDLER_H

#include "Matrix.h"
#include "FileHandler.h"
#include <vector>
#include <string>

class CSVHandler : public FileHandler {
public:
    Matrix readCSV(const std::string& filename);
    void writeDataToCSV(const std::vector<std::vector<double> >& data, const std::string& filename);
};

#endif // CSVHANDLER_H#ifndef FILEHANDLER_H
#define FILEHANDLER_H

#include <vector>
#include <string>

class FileHandler {
public:
    std::vector<std::string> readFile(const std::string& filename);
};

#endif // FILEHANDLER_H#include "Headers/CSVHandler.h"
#include <sstream>
#include <fstream>

Matrix CSVHandler::readCSV(const std::string& filename) {
    std::vector<std::string> lines = readFile(filename);
    Matrix data;

    for (const std::string& line : lines) {
        std::vector<double> row;
        std::stringstream ss(line);
        std::string cell;

        while (std::getline(ss, cell, ',')) {
            row.push_back(std::stod(cell));
        }

        data.appendRow(row);
    }
    return data;
}

void CSVHandler::writeDataToCSV(const std::vector<std::vector<double> >& data, const std::string& filename) {
    std::ofstream file(filename);
    if (file.is_open()) {
        // Write the column headers
        file << "Window, Target Return, In-sample Mean, In-sample Covariance, Out-sample Mean, Out-sample Covariance\n";

        // Write the data
        for (const auto& row : data) {
            for (int i = 0; i < row.size(); ++i) {
                file << row[i];
                if (i != row.size() - 1) {
                    file << ", ";
                }
            }
            file << "\n";
        }

        file.close();
    }
    else {
    }
}#include "Headers/FileHandler.h""
#include <fstream>
#include <iostream>

std::vector<std::string> FileHandler::readFile(const std::string& filename) {
    std::vector<std::string> lines;
    std::ifstream file(filename);

    if (!file.is_open()) {
        std::cout << "Failed to open the file: " << filename << std::endl;
        return lines;
    }

    std::string line;
    while (std::getline(file, line)) {
        lines.push_back(line);
    }

    file.close();
    return lines;
}#include <iostream>
#include <vector>
#include "Headers/Matrix.h"
#include "Headers/CSVHandler.h"
#include "Headers/Window.h"
#include "Headers/Assets.h"
#include "Headers/Portfolio.h"
#include "Headers/ConjugateGradientOptimiser.h"
#include "Headers/TargetReturns.h"

int main() {
    try {
        // Read the file
        CSVHandler csvHandler;
        Matrix assetReturns = csvHandler.readCSV("Data/asset_returns.csv");

        // Check if matrix is empty
        if (assetReturns.empty()) {
            std::cout << "Matrix is empty" << std::endl;
            return 0;
        }

        // Create an object of Window
        Window window(100, 12);

        std::vector<std::vector<double> > data;
        // Loop over assetReturns to create rolling window portfolios
        int numAssets = assetReturns.front().size();
        std::cout << "Number of assets: " << numAssets << std::endl;

        int count = 0;
        TargetReturns targetReturns;
        for (int currentIndex = 0; currentIndex + window.getInSampleSize() < assetReturns.size(); currentIndex += window.getOutSampleSize()) {
            std::cout << "Processing in-sample rolling window: " << count++ << std::endl;
            Portfolio inSamplePortfolio(assetReturns);
            Portfolio outSamplePortfolio(assetReturns);

            inSamplePortfolio.addAssetReturnsIndex(currentIndex, currentIndex + window.getInSampleSize());
            outSamplePortfolio.addAssetReturnsIndex(currentIndex + window.getInSampleSize(), currentIndex + window.getInSampleSize() + window.getOutSampleSize());

            // Calculate mean returns and covariance matrix
            inSamplePortfolio.populateAssetsMeanCovariance();
            outSamplePortfolio.populateAssetsMeanCovariance();

            for (const auto& targetReturn : targetReturns.getTargetReturns()) {
                inSamplePortfolio.populateWeights(targetReturn);
                inSamplePortfolio.populateStatistics();
                outSamplePortfolio.setWeight(inSamplePortfolio.getWeight());
                outSamplePortfolio.populateStatistics();
                std::cout << " (window, targetReturn) = " << count << ", " << targetReturn << std::endl;
                std::cout << "Insample (mean, covariance) = " << inSamplePortfolio.getPortfolioMean() << ", " << inSamplePortfolio.getPortfolioCovariance() << std::endl;
                std::cout << "Outsample (mean, covariance) = " << outSamplePortfolio.getPortfolioMean() << ", " << outSamplePortfolio.getPortfolioCovariance() << std::endl;
                std::cout << std::endl;

                std::vector<double> row;
                row.push_back(static_cast<double>(count));
                row.push_back(targetReturn);
                row.push_back(inSamplePortfolio.getPortfolioMean());
                row.push_back(inSamplePortfolio.getPortfolioCovariance());
                row.push_back(outSamplePortfolio.getPortfolioMean());
                row.push_back(outSamplePortfolio.getPortfolioCovariance());

                data.push_back(row);
            }
            std::cout << std::endl;
            csvHandler.writeDataToCSV(data, "portfolio_data.csv");
        }
    } catch (const std::exception& e) {
        std::cout << "An error occurred: " << e.what() << std::endl;
    }

    return 0;
}
#ifndef MATRIX_H
#define MATRIX_H

#include <vector>

class Matrix : public std::vector<std::vector<double> > {
public:
    void appendRow(const std::vector<double>& row);
    Matrix subset(int startIndex, int endIndex) const;
    std::vector<double> subtractVectors(const std::vector<double>& a, const std::vector<double>& b) const;
    std::vector<double> multiplyMatrixVector(const Matrix& m, const std::vector<double>& v) const;
    std::vector<double> multiplyVector(double scalar, const std::vector<double>& v) const;
    std::vector<double> addVectors(const std::vector<double>& a, const std::vector<double>& b) const;
    double dotProduct(const std::vector<double>& a, const std::vector<double>& b) const;
    double norm(const std::vector<double>& v) const;
};

#endif // MATRIX_H
#include "Headers/Matrix.h"
#include <stdexcept>

void Matrix::appendRow(const std::vector<double>& row) {
    if (!empty() && row.size() != front().size()) {
        throw std::runtime_error("Cannot append row: Incompatible size");
    }
    push_back(row);
}

Matrix Matrix::subset(int startIndex, int endIndex) const {
    if (startIndex < 0 || endIndex >= size() || startIndex > endIndex) {
        throw std::runtime_error("Invalid indices for subsetting");
    }

    Matrix subsetData;
    for (int i = startIndex; i < endIndex; ++i) {
        subsetData.push_back((*this)[i]);
    }

    return subsetData;
}

std::vector<double> Matrix::subtractVectors(const std::vector<double>& a, const std::vector<double>& b) const {
    if (a.size() != b.size()) {
        throw std::runtime_error("Cannot subtract vectors: Incompatible sizes");
    }
    std::vector<double> result(a.size());
    for (int i = 0; i < a.size(); i++) {
        result[i] = a[i] - b[i];
    }
    return result;
}

std::vector<double> Matrix::multiplyMatrixVector(const Matrix& m, const std::vector<double>& v) const {
    if (m.front().size() != v.size()) {
        throw std::runtime_error("Cannot multiply matrix and vector: Incompatible sizes");
    }
    std::vector<double> result(m.size(), 0.0);
    for (int i = 0; i < m.size(); i++) {
        for (int j = 0; j < m[i].size(); j++) {
            result[i] += m[i][j] * v[j];
        }
    }
    return result;
}

std::vector<double> Matrix::multiplyVector(double scalar, const std::vector<double>& v) const {
    std::vector<double> result(v.size());
    for (int i = 0; i < v.size(); i++) {
        result[i] = scalar * v[i];
    }
    return result;
}

std::vector<double> Matrix::addVectors(const std::vector<double>& a, const std::vector<double>& b) const {
    if (a.size() != b.size()) {
        throw std::runtime_error("Cannot add vectors: Incompatible sizes");
    }
    std::vector<double> result(a.size());
    for (int i = 0; i < a.size(); i++) {
        result[i] = a[i] + b[i];
    }
    return result;
}

double Matrix::dotProduct(const std::vector<double>& a, const std::vector<double>& b) const {
    if (a.size() != b.size()) {
        throw std::runtime_error("Cannot compute dot product: Incompatible sizes");
    }
    double sum = 0.0;
    for (int i = 0; i < a.size(); i++) {
        sum += a[i] * b[i];
    }
    return sum;
}

double Matrix::norm(const std::vector<double>& v) const {
    return std::sqrt(dotProduct(v, v));
}
#ifndef PORTFOLIO_H
#define PORTFOLIO_H

#include "Assets.h"
#include "PortfolioParameter.h"
#include <vector>

class Portfolio : public Assets, public PortfolioParameter {
private:
    double portfolioMean;
    double portfolioCovariance;
    void calculatePortfolioMean();
    void calculatePortfolioCovariance();

public:
    Portfolio(const Matrix& assetReturns);

    void populateWeights(double targetReturn);
    void populateStatistics();

    double getPortfolioMean() const;
    double getPortfolioCovariance() const;
};

#endif // PORTFOLIO_H
#ifndef WINDOW_H
#define WINDOW_H

class Window {
private:
    int inSampleSize;
    int outSampleSize;

public:
    Window();
    Window(int inSample, int outSample);

    void setInSampleSize(int inSample);
    void setOutSampleSize(int outSample);

    int getInSampleSize() const;
    int getOutSampleSize() const;
};

#endif // WINDOW_H#include "Headers/Portfolio.h"
#include<iostream>
#include<numeric>
Portfolio::Portfolio(const Matrix& assetReturns)
    :  Assets(assetReturns) {
}

void Portfolio::populateStatistics() {
    calculatePortfolioMean();
    calculatePortfolioCovariance();
}

void Portfolio::populateWeights(double targetReturn) {
    generateWeights(*this, targetReturn);
}


void Portfolio::calculatePortfolioMean() {
    const std::vector<double>& meanReturns = getMeanReturns();
    const std::vector<double>& weights = getWeight();

    // Calculate portfolio mean
    portfolioMean = std::inner_product(meanReturns.begin(), meanReturns.end(), weights.begin(), 0.0);
}

void Portfolio::calculatePortfolioCovariance() {
    // Calculate portfolio covariance
    const Matrix& covMatrix = getCovarianceMatrix();
    const std::vector<double>& weights = getWeight();
    std::vector<double> weightsTranspose(weights.size());
    
    for (int i = 0; i < weights.size(); ++i) {
        weightsTranspose[i] = weights[i];
    }
    
    double dotProduct = 0.0;
    for (int i = 0; i < weights.size(); ++i) {
        for (int j = 0; j < weights.size(); ++j) {
            dotProduct += weightsTranspose[i] * covMatrix[i][j] * weights[j];
        }
    }
    portfolioCovariance = dotProduct;
}




double Portfolio::getPortfolioMean() const {
    return portfolioMean;
}

double Portfolio::getPortfolioCovariance() const {
    return portfolioCovariance;
}
#include "Headers/Window.h"

Window::Window() : inSampleSize(0), outSampleSize(0) {}

Window::Window(int inSample, int outSample) : inSampleSize(inSample), outSampleSize(outSample) {}

void Window::setInSampleSize(int inSample) {
    inSampleSize = inSample;
}

void Window::setOutSampleSize(int outSample) {
    outSampleSize = outSample;
}

int Window::getInSampleSize() const {
    return inSampleSize;
}

int Window::getOutSampleSize() const {
    return outSampleSize;
}#ifndef PORTFOLIOOPTIMISER_H
#define PORTFOLIOOPTIMISER_H

#include "Matrix.h"
#include <vector>

class PortfolioOptimiser {
public:
    virtual std::vector<double> getWeights(const Matrix& covMatrix, const std::vector<double>& meanReturns, double targetReturn) = 0;
};

#endif // PORTFOLIOOPTIMISER_H
#ifndef CONJUGATEGRADIENTOPTIMISER_H
#define CONJUGATEGRADIENTOPTIMISER_H

#include "PortfolioOptimiser.h"
#include "Matrix.h"
#include <vector>

class ConjugateGradientOptimiser : public PortfolioOptimiser {
public:
    std::vector<double> getWeights(const Matrix& covMatrix, const std::vector<double>& meanReturns, double targetReturn) override;
};

#endif // CONJUGATEGRADIENTOPTIMISER_H
#include "Headers/ConjugateGradientOptimiser.h"
#include "Headers/Matrix.h"

std::vector<double> ConjugateGradientOptimiser::getWeights(const Matrix& covMatrix, const std::vector<double>& meanReturns, double targetReturn) {
    // Number of assets
    int numAssets = covMatrix.size();

    // Initialize weights vector with equal allocation
    std::vector<double> weights(numAssets, 1.0 / numAssets);

    // Conjugate Gradient iterations
    int maxIterations = 1000;  // Maximum number of iterations
    double tolerance = 1e-6;     // Tolerance for convergence

    std::vector<double> gradient(numAssets);    // Gradient vector
    std::vector<double> direction(numAssets);   // Conjugate direction vector
    std::vector<double> prevDirection(numAssets);  // Previous conjugate direction vector

    double alpha, beta, dotProduct, normGradient;

    for (int iteration = 0; iteration < maxIterations; iteration++) {
        // Calculate gradient
        gradient = covMatrix.multiplyMatrixVector(covMatrix, weights);
        gradient = covMatrix.multiplyVector(2.0, gradient);
        std::vector<double> meanReturnsScaled = covMatrix.multiplyVector(2.0 * targetReturn, meanReturns);
        gradient = covMatrix.subtractVectors(gradient, meanReturnsScaled);

        // Check for convergence
        normGradient = covMatrix.norm(gradient);
        if (normGradient < tolerance) {
            break;  // Convergence achieved
        }

        if (iteration == 0) {
            direction = gradient;
        } else {
            dotProduct = covMatrix.dotProduct(gradient, gradient);
            beta = dotProduct / normGradient;

            direction = covMatrix.addVectors(gradient, covMatrix.multiplyVector(beta, prevDirection));
        }

        // Calculate step size
        dotProduct = covMatrix.dotProduct(gradient, direction);
        alpha = normGradient / dotProduct;

        // Update weights
        weights = covMatrix.subtractVectors(weights, covMatrix.multiplyVector(alpha, direction));

        // Update previous direction
        prevDirection = direction;
    }

    return weights;
}
#ifndef Assets_H
#define Assets_H

#include "Matrix.h"
#include <vector>

class Assets {
private:
    const Matrix& assetReturns;
    int assetReturnsIndexes[2];
    std::vector<double> meanReturns;
    Matrix covarianceMatrix;
    void calculateMeanReturns();
    void calculateCovarianceMatrix();

public:
    Assets(const Matrix& assetReturns);

    void addAssetReturnsIndex(int start, int end);
    void populateAssetsMeanCovariance();

    std::vector<double> getMeanReturns();
    Matrix getCovarianceMatrix();
};

#endif // Assets_H#include "Headers/Assets.h"
#include "Headers/Matrix.h"
#include <iostream>

Assets::Assets(const Matrix& assetReturns) : assetReturns(assetReturns) {}


void Assets::addAssetReturnsIndex(int start, int end) {
    assetReturnsIndexes[0] = start;
    assetReturnsIndexes[1] = end;
}

// Lazt loading
void Assets::populateAssetsMeanCovariance() {
    calculateMeanReturns();
    calculateCovarianceMatrix();
}

void Assets::calculateMeanReturns() {
    const Matrix& assetData = assetReturns;

    int numAssets = assetData.front().size();
    int numDays = assetData.size();

    meanReturns.clear();
    meanReturns.reserve(numAssets);

    for (int i = 0; i < numAssets; ++i) {
        double sum = 0.0;
        for (int k = assetReturnsIndexes[0]; k < assetReturnsIndexes[1]; ++k) {
            sum += assetData[k][i];
        }
        double meanReturn = sum / (assetReturnsIndexes[1] - assetReturnsIndexes[0]);
        meanReturns.push_back(meanReturn);
    }
}

void Assets::calculateCovarianceMatrix() {
    const Matrix& assetData = assetReturns;

    int numAssets = assetData[0].size();
    int numDays = assetData.size();

    covarianceMatrix.clear();
    covarianceMatrix.resize(numAssets, std::vector<double>(numAssets));

    for (int i = 0; i < numAssets; ++i) {
        for (int j = 0; j < numAssets; ++j) {
            double sum = 0.0;
            for (int k = assetReturnsIndexes[0]; k < assetReturnsIndexes[1]; ++k) {
                double diff_i = assetData[k][i] - meanReturns[i];
                double diff_j = assetData[k][j] - meanReturns[j];
                sum += diff_i * diff_j;
            }
            double cov = sum / (assetReturnsIndexes[1] - assetReturnsIndexes[0]);
            covarianceMatrix[i][j] = cov;
            covarianceMatrix[j][i] = cov; // Covariance matrix is symmetric
        }
    }
}


std::vector<double> Assets::getMeanReturns() {
    if (meanReturns.empty()) {
        calculateMeanReturns();
    }
    return meanReturns
    
    ;
}

Matrix Assets::getCovarianceMatrix() {
    if (covarianceMatrix.empty()) {
        calculateCovarianceMatrix();
    }
    return covarianceMatrix;
}#include "Headers/PortfolioParameter.h"

PortfolioParameter::PortfolioParameter() {
    // Constructor implementation goes here
}


std::vector<double> PortfolioParameter::generateWeights(Assets& assets, double targetReturn) {

    const Matrix& covMatrix = assets.getCovarianceMatrix();
    const std::vector<double>& meanReturns = assets.getMeanReturns();

    // Call the optimizer's getWeights function
    weight =  ConjugateGradientOptimiser::getWeights(covMatrix, meanReturns, targetReturn);
    return weight;
}


std::vector<double> PortfolioParameter::getWeight() {
    return weight;
}

void PortfolioParameter::setWeight(std::vector<double> w) {
    weight = w;
}#ifndef PORTFOLIOPARAMETER_H
#define PORTFOLIOPARAMETER_H

#include "ConjugateGradientOptimiser.h"
#include "Assets.h"


class PortfolioParameter : public ConjugateGradientOptimiser {
private:
    std::vector<double> weight;

public:
    PortfolioParameter();

    std::vector<double> generateWeights(Assets& assets, double targetReturn);
    std::vector<double> getWeight();
    void setWeight(std::vector<double> w);

};

#endif // PORTFOLIOPARAMETER_H
#ifndef TARGETRETURNS_H
#define TARGETRETURNS_H

#include <vector>

class TargetReturns {
private:
    std::vector<double> targetReturns;

public:
    TargetReturns();

    void addTargetReturn(double targetReturn);
    void deleteTargetReturn(int index);
    void setTargetReturn(int index, double targetReturn);

    const std::vector<double>& getTargetReturns() const;
};

#endif 
#include <iostream>
#include <vector>
#include "Headers/TargetReturns.h"

TargetReturns::TargetReturns() {
    // Initialize with default target returns
    targetReturns.push_back(0.0);
    targetReturns.push_back(0.005);
    targetReturns.push_back(0.01);
    targetReturns.push_back(0.015);
    targetReturns.push_back(0.02);
    targetReturns.push_back(0.025);
    targetReturns.push_back(0.03);
    targetReturns.push_back(0.035);
    targetReturns.push_back(0.04);
    targetReturns.push_back(0.045);
    targetReturns.push_back(0.05);
    targetReturns.push_back(0.055);
    targetReturns.push_back(0.06);
    targetReturns.push_back(0.065);
    targetReturns.push_back(0.07);
    targetReturns.push_back(0.075);
    targetReturns.push_back(0.08);
    targetReturns.push_back(0.085);
    targetReturns.push_back(0.09);
    targetReturns.push_back(0.095);
}

void TargetReturns::addTargetReturn(double targetReturn) {
    targetReturns.push_back(targetReturn);
}

void TargetReturns::deleteTargetReturn(int index) {
    if (index < targetReturns.size()) {
        targetReturns.erase(targetReturns.begin() + index);
    }
}

void TargetReturns::setTargetReturn(int index, double targetReturn) {
    if (index < targetReturns.size()) {
        targetReturns[index] = targetReturn;
    }
}

const std::vector<double>& TargetReturns::getTargetReturns() const {
    return targetReturns;
}
